<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:mure="http://mure-apps.github.io" width="600" height="1920">
  <metadata id="mure">
    <mure:interactivity>
      <mure:library src="https://mure-apps.github.io/docs/mure.min.js"></mure:library>
      <mure:library src="https://d3js.org/d3.v4.min.js"></mure:library>
      <mure:library src="https://code.jquery.com/jquery-2.2.4.min.js"></mure:library>
      <mure:script>
        <![CDATA[
          function clickCircle (element, event) {
            console.log(arguments);
          }

          var KEY = { w: 87, a: 65, s: 83, d: 68 };
          var moveSpeed = 10;
          var circle = d3.select('circle');
          var x = parseInt(circle.attr('cx'));
          var y = parseInt(circle.attr('cy'));
          jQuery(document).on('keydown', function (evt) {
            switch (evt.keyCode) {
              case KEY.w:
                circle.attr('cy', y -= moveSpeed);
                break;
              case KEY.s:
                circle.attr('cy', y += moveSpeed);
                break;
              case KEY.a:
                circle.attr('cx', x -= moveSpeed);
                break;
              case KEY.d:
                circle.attr('cx', x += moveSpeed);
                break;
            }
          });
        ]]>
      </mure:script>
      <script id="mureLibraryLoader" type="text/javascript">
        <![CDATA[

        /* globals XMLHttpRequest, ActiveXObject */
        /* eslint no-eval: 0 */
        function load (url, callback) {
          let xhr;
          if (typeof XMLHttpRequest !== 'undefined') {
            xhr = new XMLHttpRequest();
          } else {
            let versions = [
              'MSXML2.XmlHttp.5.0',
              'MSXML2.XmlHttp.4.0',
              'MSXML2.XmlHttp.3.0',
              'MSXML2.XmlHttp.2.0',
              'Microsoft.XmlHttp'
            ];
            for (let i = 0, len = versions.length; i < len; i++) {
              try {
                xhr = new ActiveXObject(versions[i]);
                break;
              } catch (e) {}
            }
          }

          xhr.onreadystatechange = ensureReadiness;

          function ensureReadiness () {
            if (xhr.readyState < 4) {
              return;
            }

            if (xhr.status !== 200) {
              return;
            }

            // all is well
            if (xhr.readyState === 4) {
              callback(xhr.responseText);
            }
          }

          xhr.open('GET', url, true);
          xhr.send('');
        }

        function loadLibraries (callback) {
          // Grab all the mure:library tags, and load the referenced library (script src attributes
          // in SVG don't work, so we have to manually load remote libraries)
          let libraries = Array.from(document.getElementsByTagNameNS('http://mure-apps.github.io', 'library'))
            .map(libraryTag => libraryTag.getAttribute('src'));

          // This is a funky check to see whether we're actually debugging mure.js locally, or if
          // this is the normal use case where we should just stick with the hosted version
          let mureLibraryIndex = libraries.indexOf('https://mure-apps.github.io/docs/mure.min.js');
          if (mureLibraryIndex !== -1) {
            let parentLibraries = [];
            if (window.parent !== window) {
              parentLibraries = Array.from(window.parent.document.getElementsByTagName('script'))
                .filter(scriptTag => scriptTag.getAttribute('src') === 'mure.js');
            }
            if (parentLibraries.length !== 0) {
              // swap the hosted library for the debugging one
              libraries[mureLibraryIndex] = 'mure.js';
            }
          }

          let loadedLibraries = {};
          let onloadFired = false;

          libraries.forEach(function (script) {
            load(script, function (scriptText) {
              eval(scriptText);
              loadedLibraries[script] = true;
              attemptStart();
            });
          });

          window.onload = function () {
            onloadFired = true;
            attemptStart();
          };

          function attemptStart () {
            if (!onloadFired) {
              return;
            }
            let allLoaded = libraries.every(script => {
              return loadedLibraries[script];
            });
            if (allLoaded) {
              callback();
            }
          }
        }

        function runUserScripts () {
          Array.from(document.getElementsByTagNameNS('http://mure-apps.github.io', 'script'))
            .forEach(scriptTag => eval(scriptTag.textContent));
        }

        loadLibraries(runUserScripts);


        ]]>
      </script>
    </mure:interactivity>
  </metadata>
  <circle cx="250" cy="250" r="50" fill="red" mure:data='{"hi":"there"}' onclick="clickCircle(this, event)"/>
</svg>
